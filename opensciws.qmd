# Introduction

---


## > `whoami`

::::: {.tiny}

:::: {.columns}
::: {.column width="80%"}
Quirin Würschinger  
[q.wuerschinger@lmu.de](mailto:q.wuerschinger@lmu.de)  
Wissenschaftlicher Mitarbeiter and PostDoc in (computational) linguistics  
LMU Munich
:::
::: {.column width="20%"}
![](att/qw.png){height=150 fig-align="right"}
:::
::::

:::: {.columns}
::: {.column width="50%"}
**Current work**

- **research** 
    - lexical innovation on the web and in social networks 
    - variation and change in language use and social polarization in social networks
    - using Large Language Models (LLMs) like ChatGPT for research in linguistics and social science.
- **teaching**: corpus linguistics and research methodology
:::
::: {.column width="50%"}
**Promoting Open Science in (computational) linguistics at LMU**

- teaching and applying reproducible corpuslinguistic methods
- creating and sharing corpora among researchers and students
:::
::::
:::::

---

## Workshop materials

GitHub repository
: <https://github.com/wuqui/opensciws>

slides
: <https://wuqui.github.io/opensciws/opensciws_slides.html>

website version
: <https://wuqui.github.io/opensciws/opensciws_website.html>

---

## `Open` Open Science workshop

Focus on …

- ask questions
- discuss
- apply and practice
- collaborate

---

## Time table

::: {.tiny}
| Topic                        | Start | End   |
|------------------------------|-------|-------|
| intro                        | 09:00 |       |
| Open Science principles      |       | 10:30 |
| ~                            |       |       |
| version control              | 10:50 |       |
| project structure            |       | 12:00 |
| ~                            |       |       |
| code                         | 13:15 |       |
| data and methods             |       | 14:40 |
| ~                            |       |       |
| publishing                   | 15:00 |       |
| authoring                    |       | 15:25 |
| recap, open issues, feedback | 16:00 | 16:30 |
:::

---

## Addressing different backgrounds and goals

---

### Backgrounds and interests 

CAIS: Forschung zu Digitalisierung und Digitale Gesellschaft

:::: {.columns .smallest}
::: {.column width="50%"}
**research fiels**

- education and pedagogy
- political science
- sociology
- communications studies
- …
:::
::: {.column width="50%"}
**data and methods**

- qualitative interviews
- text analysis 
- quantitative surveys
- experimental designs
- social media studies
- …
:::
::::

---

### Survey: main interests

::: {.smallest}
- reproducible workflows
    - managing files and folders
    - programming with Python and R
    - plain text authoring
- data and methods
    - text analysis
    - social media analysis
    - questionnaires
- publishing
    - sharing data and code
    - authoring papers
:::

---

### Who are you?

Please briefly introduce yourself …

::::: {.smaller}
:::: {.columns}
::: {.column width="60%"}
1. name
1. place and position
1. your research interest in about 3 sentences for someone outside your field
:::
::: {.column width="40%"}
![[Dance your PhD](https://www.science.org/do/10.1126/science.adh5473/abs/_20230313_on_dance_your_phd_4.jpg)](att/dance-your-phd.png)
:::
::::
:::::

---

# Open Science principles

---

## What is Open Science?

![](att/what-is-open-science.png)

---

## Why should we do Open Science?

![[source](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.gfe5b481e28_0_8)](att/most-science-is-wrong.png)

::: {.notes}
- dataset/sample size
- effect sizes
- selection/number of relationships
- flexibility in design
- financial interests
- hype around topic/field
:::

---

What are the reasons why science can go wrong?

---

![[source](https://ascl.net/wordpress/wp-content/uploads/2014/01/reproducibility-graphic-online4-e1465141765559.jpg)](att/factors-irreproducible-research.png)

---

![[source](https://projects.fivethirtyeight.com/p-hacking/)](att/p-hacking.png)

---


![[Richard McElreath: *Science as Amateur Software Development*](https://www.youtube.com/watch?v=zwRdO9_GGhY)](att/scientists-mostly-hackers.png)

---

![[source](https://www.youtube.com/watch?v=zwRdO9_GGhY)](att/skills-to-pay-the-bills.png)

---

## Principles of Open Science

![[Center for Open Science](https://www.cos.io/open-science)](att/open-science-principles.png)

::: {.notes}
09:20
:::

---

## Open Science lifecycle

![[Center for Open Science](https://www.cos.io/open-science)](att/open-science-lifecycle.png)

---

## Roles in Open Science

::: {.smallest}
Funders 
: make open science part of the selection process, and conditions for grantees conducting research.

Publishers 
: make open science part of the review process, and conditions for articles published in their journals.

Institutions 
: make open science part of academic training, and part of the selection process for research positions and evaluation for advancement and promotion.

Societies 
: make open science part of their awards, events, and scholarly norms.

Researchers 
: enact open science in their work and advocate for broader adoption in their communities.

([Center for Open Science](https://www.cos.io/open-science))
:::

---

## Who profits from Open Science?

![[source](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.gfe5b481e28_0_22)](att/public-money.png)

---

## What is Open Science to you?

What do you find interesting, important, or attractive about Open Science?

<https://tinyurl.com/opnsci>

::: {.notes}
09:50
:::

---

## Learning outcomes

![](att/learning-outcomes.png)
      
---

# Implementing an open and reproducible workflow

1. version control
1. project structure
1. code
1. data and methods
1. authoring
1. publishing

---

::: {.content-visible when-format="revealjs"}
# Break
:::

---


# Version control

---

## Why use version control?

:::: {.columns}
::: {.column width=40%}
![](att/paper-file-names.png)
:::
::: {.column width=60%}
![](att/revision-email.png)
:::
::::

::: {.smallest}
[source](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.g23ae9873052_7_56)
:::

---

![[source](https://technicalwriterhq.com/documentation/document-control/document-version-control/)](att/version-control-multiple-users.png)

---

![[source](https://technicalwriterhq.com/documentation/document-control/document-version-control/)](att/version-control-benefits.png)

---

## git and GitHub/GitLab

:::: {.columns .r-fit-text}
::: {.column width="50%"}
git
: software on your machine

![](att/logo-git.png){height=250}

```sh
git add src/tests.py
git commit -m 'add tests'
git push
```

:::
::: {.column width="50%"}

GitHub and GitLab
: services on a remote server

:::: {.columns}
::: {.column width="50%"}
![](att/logo-github.png){height=250}
:::
::: {.column width="50%"}
![](att/logo-gitlab.png){height=250}
:::
::::
:::
::::

---

## Collaborating using GitHub

![[(source)](https://cdn.duzun.me/images/tips/git_remotes.png)](att/github-collaboration.png)

---

## git commands

![[(source)](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.g23ae9873052_7_266)](att/git-commands.png)

---

## GitHub workflow

![[(source)](https://dev.to/mollynem/git-github--workflow-fundamentals-5496)](att/github-workflow.png)


---

### Example

![[source](https://github.com/alan-turing-institute/the-turing-way/commit/72039372a2803a4ec15764b2c01017039320f096 )](att/github-example-commit.png)

---

## How to set up a GitHub repository

---

### set up `git`

::: {.smallest}
**Installing** `git`: see [tutorial](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)

**Using** `git`:

- from the command line
- using a standalone GUI^[Graphical User Interface] tool; e.g.: 
    - [GitKraken](https://www.gitkraken.com/)
    - [GitHub Desktop](https://desktop.github.com/)
- from within your editor/IDE^[Integrated Development Environment]; e.g.:
    - [RStudio](https://posit.co/download/rstudio-desktop/)
    - [VSCode](https://code.visualstudio.com/)
:::

---

### set up `GitHub`

[tutorial](https://docs.github.com/en/get-started/quickstart/set-up-git)

- setting up git user information (name, passwort)
- setting up GitHub authentication
- setting and storing authentication (‘token’)

---

### create a repository on GitHub

:::: {.columns .smallest}
::: {.column width="50%"}
1. (create [GitHub](https://github.com/) account)
2. click on `New` (<https://github.com/new>)
3. specify repo name ^[safe: lowercase alphabet characters]
4. specify description
5. specify visibility: private or public
6. select `Add a README file`
6. specify licence ^[good choice for many purposes: MIT license]
:::
::: {.column width="50%"}
<!-- ![](att/git-create-repo.png) -->
![](att/git-create-repo-long.png)
:::
::::

---

### `clone` repositories

go to the folder where you want your project to live

![](att/git-clone.png)

```sh
git clone https://github.com/wuqui/opensciws.git
```

---

### `add`ing, `commit`ing, and `push`ing changes

![[(source)](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.g23ae9873052_7_266)](att/git-commands.png)

```sh
git add src/tests.py
git commit -m 'add tests'
git push
```

---

# Project structure

---

:::: {.columns}
::: {.column width="50%"}
![](att/genius-einstein.png)
:::
::: {.column width="50%"}
:::: {.content-visible unless-format="pdf"}
![[source](https://docs.google.com/presentation/d/1Ae85nKcTAkr-omlTZopN04yV-lPBZJjX9kPMVUlBRVo/edit#slide=id.g230f92d131c_0_86)](att/genius-trump.gif)
::::
Let’s not pretend we’re all geniuses …
:::
::::

---

## File names

![](att/file-names.png)

::: {.smallest}
File names should be:

- machine-readable
- human-readable
- consistent
- avoid non-ASCII characters (e.g. umlauts like ü, ä)
- optional: play well with default ordering (e.g. include timestamps)

:::


---

## File structure


```
.
├── analysis            <- all things data analysis
│   └── src             <- functions and other source files
├── comm
│   ├── internal-comm   <- internal communication such as meeting notes
│   └── journal-comm    <- communication with the journal, e.g. peer review
├── data
│   ├── data_clean      <- clean version of the data
│   └── data_raw        <- raw data (don't touch)
├── dissemination
│   ├── manuscripts
│   ├── posters
│   └── presentations
├── documentation       <- documentation, e.g. data management plan
└── misc                <- miscellaneous files that don't fit elsewhere

```

General principle
: keep the ‘inputs’ of your project/code (e.g. data) separate from its outputs (e.g. plots).

---

## Practice: project management

You have until 11:50 h to work on either …

1. developing a project structure for your needs from scratch
1. refactoring/cleaning an existing project^[make a backup first]

Optionally: set up version control via git/GitHub for this project.

---


::: {.content-visible when-format="revealjs"}
# Break
:::

---

# Code

---

## Reproducibility

---

### Reproducibility (crisis)

![[source](https://www.youtube.com/watch?v=zwRdO9_GGhY)](att/reproducibility-numbers.png)

---

### Reproducibility et al.

![[The Turing Way](https://the-turing-way.netlify.app/reproducible-research/overview/overview-definitions.html)](att/reproducibility-matrix.png)

![](att/reproducibility-ruler.png)

::: {.notes}
interesting for student projects
:::

---

### The quality of tools

![[source](https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates)](att/excel-renaming.png)

---


## Testing code

### Why we should test code

![[source](https://the-turing-way.netlify.app/reproducible-research/testing.html)](att/mars-mission.png)

---

::: {.note}
not all our projects have that high stakes
:::

### Professional testing

![[source](https://www.youtube.com/watch?v=8qzVV7eEiaI&t=396s)](att/testing-stan-lib.png)

::: {.note}
same is true of industry
:::

---

### Types of tests

::: {.tiny}
:::: {.columns}
::::: {.column width="50%"}
![[source](https://madewithml.com/courses/mlops/testing/)](att/types-of-tests.png){height=300} 

**Testing frameworks**

- Python: `pytest`
- R: `testthat`
:::::
::::: {.column width="50%"}
**Analogy**

- during the process of manufacturing a ballpoint pen, the cap, the body, the tail, the ink cartridge and the ballpoint are produced separately and **unit tested** separately. 
- When two or more units are ready, they are assembled and **integration testing** is performed, for example a test to check the cap fits on the body. 
- When the complete pen is integrated, **system testing** is performed to check it can be used to write like any pen should. 
- **Acceptance testing** could be a check to ensure the pen is the colour the customer ordered.

[source](https://the-turing-way.netlify.app/reproducible-research/testing/testing-overview)
:::::
::::
:::

---

### Testing example

using `pytest` for Python

![](att/pytest-example.png)

---

## Documenting code

### Literate programming

::::: {.tiny}
:::: {.columns}
::: {.column width="70%"}
- ‘Literate programming is a methodology that combines a programming language with a **documentation language**, 
- thereby making programs **more robust**, **more portable**, **more easily maintained**, 
- and arguably **more fun** to write than programs that are written only in a high-level language. 
- The main idea is to treat a program as a piece of literature, **addressed to human beings** rather than to a computer. 
- The program is also viewed as a **hypertext document**, rather like the World Wide Web. (Indeed, I used the word WEB for this purpose long before CERN grabbed it!)’

[Donald Knuth](https://www-cs-faculty.stanford.edu/~knuth/lp.html)
:::
::: {.column width="30%"}
![[source](https://en.wikipedia.org/wiki/Literate_programming#/media/File:Literate_Programming_book_cover.jpg)](att/knuth-literate-programming.png)
:::
::::
:::::

::: {.notes}
psychological benefit: conversation
- helps reasoning
- more fun (human)
- → ChatBots
:::

---

### Notebooks

::::: {.smallest}
:::: {.columns}
::: {.column width="50%"}
Python

![[source](https://towardsdatascience.com/the-complete-guide-to-jupyter-notebooks-for-data-science-8ff3591f69a4)](att/jupyter-notebook.png)

:::
::: {.column width="50%"}
R

![[source](https://ivelasq.quarto.pub/building-a-blog-with-quarto/workflow/write-docs/index.html)](att/r-literate-programming-quarto.png) 
:::
::::
→ both work with [Quarto](https://quarto.org/)
:::::

::: {.notes}
- who uses notebooks?
- which ones?
- good for novices & experts
:::

---

### Example using `nbdev` for Python

::: {.smallest}
Programming a deck of cards: <https://github.com/fastai/nbdev_cards/>
:::

![](att/nbdev-cards-1.png)

---

### Literate testing with `nbdev`

![](att/nbdev-cars-2.png)

::: {.notes}
compare with `pytest`: much easier/natural
:::

---

### Additional benefits of `nbdev`

- simple, integrated testing
- [continuous integration](https://the-turing-way.netlify.app/reproducible-research/ci.html)
- dependency management
- publishing code for PyPI and conda
- publishing documentation via Quarto

::: {.notes}
- good for novices & experts
- covers about 80% of programming setup for free
- more about Quarto later
:::

---

### R: Quarto and RMarkdown

![](att/r-literate-programming-quarto.png)

::: {.notes}
benefit: visual editor
:::

---

## Licensing

::: {.smallest}
:::: {.columns}
::: {.column}
**Code**

![<https://choosealicense.com>](att/choose-a-license.png)

often appropriate: [MIT license](https://choosealicense.com/licenses/mit/)

:::
::: {.column}
**Other materials**

![<https://creativecommons.org/choose/>](att/license-features.png)

:::
::::
:::

---

# Data and methods

---

## Diversity in data and methods

CAIS: Forschung zu Digitalisierung und Digitale Gesellschaft

:::: {.columns .smallest}
::: {.column width="50%"}
**research fiels**

- education and pedagogy
- political science
- sociology
- communications studies
- …
:::
::: {.column width="50%"}
**data and methods**

- qualitative interviews
- text analysis 
- quantitative surveys
- experimental designs
- social media studies
- …
:::
::::

---

![[source](http://ithare.com/cpp-guidelines-made-to-measure-s-one-size-fits-all/)](att/one-size-fits-all.png)

---

## Reasons to share your data

::: {.tiny}
:::: {.columns}
::: {.column width="45%"}
![[source](https://doi.org/10.5281/zenodo.3332807)](att/turing-share-data.png)
:::
::: {.column width="55%"}
- To allow the possibility to fully **reproduce** a scientific study.
- To prevent duplicate efforts and **speed up scientific progress**. Large amounts of research funds and careers of researchers can be wasted by only sharing a small part of research in the form of publications.
- To facilitate **collaboration** and increase the impact and quality of scientific research.
- To make results of research openly available as a **public good**, since research is often publicly funded.
:::
::::
:::

---

## FAIR data

![[source](https://libereurope.eu/article/fairdataconsultation/)](att/fair-data.png)

---

## How to share your data

::: {.tiny}
[Turing Way tutorial](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-sharing.html)

- Step 1: Select **what data** you want to share; eg.:
    - ethical concerns
    - commercial concerns
- Step 2: Choose a **data repository** or other sharing platform
    - overview: [re3data](https://www.re3data.org/), [NIH](https://sharing.nih.gov/data-management-and-sharing-policy/sharing-scientific-data/generalist-repositories), [FAIRsharing](https://fairsharing.org/databases)
    - examples: [Zenodo](https://zenodo.org/), [Dryad](https://datadryad.org/)
- Step 3: Choose a **licence** and link to your paper and code; e.g.:
    - [Creative Commons](https://creativecommons.org/choose/)
    - [Open Data Commons](https://opendatacommons.org/licenses/by/index.html)
- Step 4: **Upload** your data and documentation
    - good file organisation
    - appropriate file formats (e.g. `csv` > `xlsx`)
:::

::: {.notes}
- Excel issues
    - formatting
    - thousands separators: `,` vs `.`
    - date conversion
    - formulas
:::

---

## Sharing social media data

![[source](https://www.frontiersin.org/articles/10.3389/fdata.2022.971974/full)](att/akdeniz-paper-screenshot.png)

---

**Obstacles to data-sharing**

::: {.smallest}
- Reason 1: Preparing data for sharing is **resource-intensive**
- Reason 2: Not enough **credit** for data sharing
- Reason 3: Lack of **confidence** and **knowledge**
- Reason 4: Data protection **laws**
- Reason 5: Platform **terms of service**
- Reason 6: **Copyright**
- Reason 7: Informed **consent**
- Reason 8: **Ethical** challenges
- Reason 9: Lack of common **standards**

[source](https://www.frontiersin.org/articles/10.3389/fdata.2022.971974/full)
:::

::: {.notes}
- additional reason: sharing not **considered** (necessary) 
- **ethical** and **privacy**: paper on incest on Twitter
:::

---

## The case of Twitter

::: {.smallest}
- stage 1: access costly & legal grey area for scraping
- stage 2: Research API 🎉
- stage 3: Elon Musik → X → …
:::

::: {.fragment}
![[source](https://www.theverge.com/2023/5/31/23739084/twitter-elon-musk-api-policy-chilling-academic-research)](att/twitter-api-closed-musk.png)
:::

---

## Data and methods

get active: see <https://tinyurl.com/opnsci>

---

::: {.content-visible when-format="revealjs"}
# Break
:::

---

# Publishing

---

## Open access

[The Turing Way tutorial on open access](https://the-turing-way.netlify.app/reproducible-research/open/open-access.html)

![[source](https://the-turing-way.netlify.app/reproducible-research/open/open-access.html)](att/turing-open-access-advantages.png)

---

**Routes to open access publishing**

![[source](https://the-turing-way.netlify.app/reproducible-research/open/open-access.html)](att/turing-open-access-routes.png)

---

## Preregistration

### What is preregistration?
::: {.smallest}

When you preregister your research, you're simply specifying your **research plan** **in advance** of your study and submitting it to a registry. 

Preregistration separates **hypothesis-generating** (exploratory) from **hypothesis-testing** (confirmatory) research. 

- Both are important. 
- But the same data cannot be used to generate and test a hypothesis, which can happen unintentionally and reduce the credibility of your results. 
- Addressing this problem through planning improves the quality and transparency of your research. 
- This helps you clearly report your study and helps others who may wish to build on it.

[Open Science Center tutorial](https://www.cos.io/initiatives/prereg)
:::

---

### The preregistration process

![[source](https://www.cos.io/initiatives/registered-reports)](att/pre-registration.png)

---

### Avoiding pitfalls through preregistration

![[source](https://www.cos.io/initiatives/registered-reports)](att/pre-registration-cycle.png)

::: {.tiny}
*HARKing*: hypothesizing after results are known
:::

---

## Outlets

::: {.smallest}

ArXiV
: preprints

Zenodo
: all kinds including data, code, preprints, etc.

GitHub and GitLab
: code, software

Open Science Framework
: all kinds including data, code, preprints, preregistration, etc.

Software Heritage
: archival of code (long-term)

Papers with Code
: code and data for and with papers, mostly Machine Learning

…
: 

:::

---

# Authoring

---

## Plain text authoring

![[source](https://www.reddit.com/r/LaTeX/comments/z2ifki/latex_vs_word_vs_pandoc_markdown/)](att/tex-md-docs-learning-curve.png)

---

## Markdown syntax

![](att/markdown-syntax.png)

[Quarto: Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)

---

## Benefits of Markdown

- Markdown provides **semantic meaning** for content in a relatively simple way
- You can write rich formatted content extremely **quickly** (compared to writing directly in HTML tags)
- You can **read** Markdown easily in plain text before rendered by HTML
- It doesn’t interrupt your **workflow** with the need to click buttons
- It’s **platform-agnostic** so your content is not tied to the format of your editor

---

## Quarto

<https://quarto.org/>

![](att/welcome-to-quarto.png)

---

### Multi-purpose publishing

![](att/quarto-benefits.png)

---

### Code

#### Python

![](att/quarto-python.png)

---

#### R

![](att/quarto-r.png)

---

### Multi-format publishing

see the [Quarto gallery](https://quarto.org/docs/gallery/)

---

#### Articles

![](att/quarto-article.png)

----

#### Presentations

![](att/quarto-presentations.png)

---

#### Websites

![](att/quarto-websites.png)

---

#### Personal websites and blogs

![](att/quarto-personal-websites.png)

---

## Demo

Demo repository: <https://github.com/wuqui/opensciwsdemo>

![](att/demo-quarto-website.png)

---

## Authoring a Quarto document

::: {.smallest}

You have until 16:00 h to,

based on Quarto’s excellent [getting started guide](https://quarto.org/docs/get-started>),

- install Quarto
- make an example text document using Quarto Markdown syntax (optional: clone [my demo repo](https://github.com/wuqui/opensciwsdemo))
- `render` the document to multiple output formats (`pdf`, `html`, `docx`, etc.)

further steps

- publishing your document(s) as a website on GitHub pages (see [tutorial](https://quarto.org/docs/publishing/github-pages.html))
- refactoring existing document (e.g. paper, website) to Quarto Markdown

:::

---

# Recap, open issues, feedback

1. version control
1. project structure
1. code
1. data and methods
1. authoring
1. publishing
